<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>三栏布局横向</title>
    <style>
        html * {
            margin: 0;
            padding: 0;
        }
        .layout {
            margin-bottom: 50px;
        }
    </style>
</head>
<!-- 实现要求: 假设已知道高度,完整三栏布局,左右固定宽度300px,中间容器自适应 -->
<body>
    
<!-- =================================================================== -->

    <!-- 浮动布局: 解决没有设置高度与宽度问题 -->
    <!-- 它的优点很明显: 兼容性好 -->
    <!-- 它的缺点: 在IE6,是不支持这样的写法的 -->

    <section class="layout float">
            <style>
                    /* 浮动的写法 ---------------*/
                    article {
                        overflow: hidden;
                    }
                    .layout.float .left,
                    .layout.float .right {
                        padding-bottom: 9999px;
                        margin-bottom: -9999px;
                    }
                    .layout.float p {
                        width: 100px;
                    }
                    .layout.float .left {
                        float: left;
                        /* margin-right: 20px; */
                        background: red;
                    }
                    .layout.float .right {
                        float: right;
                        /* margin-left: 20px; */
                        background: blue;
                    }
                    .layout.float .center {
                       overflow: hidden;
                       /* 设置overflow属性,会触发一个BFC模式,块级的格式化上下文, BFC里面这个容器,它里面的内容是跟外界隔离的,外面的东西,像浮动的这样的元素,是不会影响到里面的内容*/
                       background: yellow;
                    }
             </style>
        <article>
            <div class="left"><p>left</p></div>
            <div class="right"><p>right</p></div>
            <div class="center"><p>float布局</p></div>
        </article>
    </section>

    
<!-- =================================================================== -->

    <!-- 表格布局: 解决没有设置高度与宽度问题 -->
    <!-- 它的优点很明显: 兼容性好 -->
    <!-- 它的缺点:只支持IE8以上浏览器,优点的等高也是他的缺点,有时候需求可能是一边高度一致,一边高度不定的情况下,因此也是他的缺点 -->

    <section class="layout table">
        <style>
            .layout.table article {
                display: table;
                /* table-layout: fixed; */
                /* 该属性是布局优先的,因此能够提高table的渲染速度,更是功能为固定布局 */
                /* 如果需要根据内容宽度的话,就需要把该属性去掉,根据内容显示宽度 */
                width: 100%;
            }
            .layout.table .left,
            .layout.table .right,
            .layout.table .center {
                display: table-cell;
            }
            .layout.table .left {
                width: 0.1%;
                /* 因为我们要内容撑大容器,因此需要把单元格设置到最小宽度 */
                /* 为什么不设置1px,而要设置0.1%,因为在IE8中会出现问题,因此设置0.1%,这是考虑兼容性的处理 */
                padding-right: 20px;
                background: red;
            }
            .layout.table .center {
                background: yellow;
            }
            .layout.table .right {
                width: 0.1%;
                 /* 因为我们要内容撑大容器,因此需要把单元格设置到最小宽度 */
                 /* 为什么不设置1px,而要设置0.1%,因为在IE8中会出现问题,因此设置0.1%,这是考虑兼容性的处理 */
                padding-left: 20px;
                background: blue;
            }
            .layout.table .left p,
            .layout.table .right p {
                width: 100px;
            }
        </style>
        <article>
            <div class="left"><p>left</p></div>
            <div class="center"><p>table布局</p></div>
            <div class="right"><p>right</p></div>            
        </article>
    </section>

    <!-- =================================================================== -->

        <!-- 定位布局: 无法达成等高布局,无法实现根据内容宽度实现该需求,需要定宽与定高才可实现的布局方式 -->
        <!-- 它的优点很明显: 兼容性好 ,脱离文档流-->
        <!-- 它的缺点: 无法实现根据内容宽度实现布局,他自身是脱离文档流,运用不好会出现问题 -->
        <section class="layout position">
            <style>

                .layout.position .left ,
                .layout.position .center,
                .layout.position .right {
                    position: absolute;
                }
                .layout.position .left {
                    left: 0;
                    width: 100px;
                    background: red;
                }
                .layout.position .center {
                    left: 100px;
                    right: 100px;
                    background: yellow;
                }
                .layout.position .right {
                    right: 0px;
                    width: 100px;
                    background: blue;
                }
            </style>
            <article>
                <div class="left"><p>left</p></div>
                <div class="center"><p>position布局</p></div>
                <div class="right"><p>right</p></div>
            </article>
        </section>

<!-- =================================================================== -->


    <!-- 弹性盒子布局: 解决没有设置高度与宽度问题,自带原生等高 -->
    <!-- 它的优点很明显: 灵活简单, -->
    <!-- 它的缺点: 兼容性问题,性能差 -->
        <section class="layout flex">
            <style>
                .layout.flex article {
                    display: flex;
                }
                .layout.flex .left {
                    /* margin-right: 20px; */
                    background: red;
                }
                .layout.flex .center {
                    flex: 1;
                    background: yellow;
                }
                .layout.flex .right {
                    /* margin-left: 20px; */
                    background: blue;
                }
                .layout.flex .left p,
                .layout.flex .right P {
                    width: 100px;
                    /* height: 100px; */
                    /* 支持内容宽度与高度设置 */
                }
            
            </style>
            <article>
                <div class="left"><p>left</p></div>
                <div class="center"><p>center</p></div>
                <div class="right"><p>right</p></div>
            </article>
        </section>
     
<!-- =================================================================== -->

        <!-- 网格布局: 解决没有设置高度与宽度问题,等高 -->
        <!-- 它的优点很明显: 灵活简单,性能较好 -->
        <!-- 它的缺点: 兼容性问题 -->

        <section class="layout grid">
            <style>
                .layout.grid article {
                    display: grid;
                    width: 100%;
                    grid-template-columns: 100px 1fr 100px;
                }
                .layout.grid .left {
                    background: red;
                }
                .layout.grid .center {
                    background: yellow;
                }
                .layout.grid .right {
                    background: blue;
                }
            
            
            </style>
            <article>
                <div class="left"><p>left</p></div>
                <div class="center"><p>center</p></div>
                <div class="right"><p>right</p></div>
            </article>
        </section>
</body>
</html>
